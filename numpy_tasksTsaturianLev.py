import numpy as np

def uniform_intervals(a, b, n):
    """1. —Å–æ–∑–¥–∞–µ—Ç numpy –º–∞—Å—Å–∏–≤ - —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—Ç a –¥–æ b –Ω–∞ n –æ—Ç—Ä–µ–∑–∫–æ–≤."""
    return np.linspace(a, b, n)

def cyclic123_array(n): 
    """2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç numpy –º–∞—Å—Å–∏–≤ –¥–ª–∏–Ω—ã  3ùëõ , –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏ —á–∏—Å–ª–∞–º–∏ 1, 2, 3, 1, 2, 3, 1...."""
    return np.tile([1, 2, 3], n)

def first_n_odd_number(n):
    """3. –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ –ø–µ—Ä–≤—ã—Ö n –Ω–µ—á–µ—Ç–Ω—ã—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª"""
    return np.arange(1, 2*n, 2)

def zeros_array_with_border(n):
    """4. –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω—É–ª–µ–π —Ä–∞–∑–º–µ—Ä–∞ n x n —Å "—Ä–∞–º–∫–æ–π" –∏–∑ –µ–¥–∏–Ω–∏—Ü –ø–æ –∫—Ä–∞—è–º."""
    array = np.zeros((n, n), dtype=int)
    array[0, :] = 1
    array[-1, :] = 1
    array[:, 0] = 1
    array[:, -1] = 1
    return array

def chess_board(n):
    """5. –°–æ–∑–¥–∞—ë—Ç –º–∞—Å—Å–∏–≤ n x n —Å —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–æ–π –∏–∑ –Ω—É–ª–µ–π –∏ –µ–¥–∏–Ω–∏—Ü"""
    return (np.indices((n, n)).sum(axis=0)) % 2

def matrix_with_sum_index(n):
    """6. –°–æ–∑–¥–∞—ë—Ç n √ó n –º–∞—Ç—Ä–∏—Ü—É —Å (i,j)-—ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ä–∞–≤–Ω—ã–º–∏ i + j"""
    return np.add.outer(np.arange(n), np.arange(n))

def cos_sin_as_two_rows(a, b, dx):
    """7. –í—ã—á–∏—Å–ª—è–µ—Ç cos(x) –∏ sin(x) –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ [a, b) —Å —à–∞–≥–æ–º dx
    –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∫–∞–∫ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏"""
    x = np.arange(a, b, dx)
    return np.vstack((np.cos(x), np.sin(x)))

def compute_mean_rowssum_columnssum(A):
    """8. –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Å—É–º–º—É –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º"""
    return np.mean(A), np.sum(A, axis=1), np.sum(A, axis=0)

def sort_array_by_column(A, j):
    """9. –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ –ø–æ j-–º—É —Å—Ç–æ–ª–±—Ü—É"""
    return A[np.argsort(A[:, j])]

def compute_integral(a, b, f, dx, method):
    """10. –ß–∏—Å–ª–µ–Ω–Ω–æ –≤—ã—á–∏—Å–ª—è–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞–ª —Ñ—É–Ω–∫—Ü–∏–∏ f –æ—Ç a –¥–æ b —Å —à–∞–≥–æ–º dx"""
    x = np.arange(a, b, dx)
    y = f(x)
    if method == 'rectangular':
        return np.sum(y) * dx
    elif method == 'trapezoidal':
        return (y[0] + y[-1]) * dx / 2 + np.sum(y[1:-1]) * dx
    elif method == 'simpson':
        if len(x) % 2 == 0:
            x = np.append(x, x[-1] + dx)
            y = f(x)
        return dx / 3 * (y[0] + 4 * np.sum(y[1:-1:2]) + 2 * np.sum(y[2:-2:2]) + y[-1])
    else:
        raise ValueError("–ú–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'rectangular', 'trapezoidal' –∏–ª–∏ 'simpson'")
